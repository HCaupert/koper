/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoConvexRouteImport } from './routes/demo.convex'
import { Route as RoomIdChar123EntryIdChar125RouteImport } from './routes/$roomId.{-$entryId}'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoConvexRoute = DemoConvexRouteImport.update({
  id: '/demo/convex',
  path: '/demo/convex',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomIdChar123EntryIdChar125Route =
  RoomIdChar123EntryIdChar125RouteImport.update({
    id: '/$roomId/{-$entryId}',
    path: '/$roomId/{-$entryId}',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/user': typeof UserRoute
  '/$roomId/{-$entryId}': typeof RoomIdChar123EntryIdChar125Route
  '/demo/convex': typeof DemoConvexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user': typeof UserRoute
  '/$roomId/{-$entryId}': typeof RoomIdChar123EntryIdChar125Route
  '/demo/convex': typeof DemoConvexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/user': typeof UserRoute
  '/$roomId/{-$entryId}': typeof RoomIdChar123EntryIdChar125Route
  '/demo/convex': typeof DemoConvexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/user' | '/$roomId/{-$entryId}' | '/demo/convex'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user' | '/$roomId/{-$entryId}' | '/demo/convex'
  id: '__root__' | '/' | '/user' | '/$roomId/{-$entryId}' | '/demo/convex'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserRoute: typeof UserRoute
  RoomIdChar123EntryIdChar125Route: typeof RoomIdChar123EntryIdChar125Route
  DemoConvexRoute: typeof DemoConvexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/convex': {
      id: '/demo/convex'
      path: '/demo/convex'
      fullPath: '/demo/convex'
      preLoaderRoute: typeof DemoConvexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$roomId/{-$entryId}': {
      id: '/$roomId/{-$entryId}'
      path: '/$roomId/{-$entryId}'
      fullPath: '/$roomId/{-$entryId}'
      preLoaderRoute: typeof RoomIdChar123EntryIdChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserRoute: UserRoute,
  RoomIdChar123EntryIdChar125Route: RoomIdChar123EntryIdChar125Route,
  DemoConvexRoute: DemoConvexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
